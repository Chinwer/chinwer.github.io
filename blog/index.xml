<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on 邱圆辉的博客</title>
    <link>https://chinwer.github.io/blog/</link>
    <description>Recent content in Blog on 邱圆辉的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 09 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chinwer.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>几个矩阵有关的题</title>
      <link>https://chinwer.github.io/blog/leetcode-matrix/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-matrix/</guid>
      <description>第1139题 题目链接 1139. 最大的以1为边界的正方形
题目描述 给你一个由若干 0 和 1 组成的二维网格 grid，请你找出边界全部由 1 组成的最大 正方形 子网格，并返回该子网格中的元素数量。如果不存在，则返回 0。
示例 输入：grid = [[1,1,1],[1,0,1],[1,1,1]]输出：9输入：grid = [[1, 1, 0, 0]]输出：1思路 DP数组的定义
dp[i][j][0]: i,j左边连续的1的个数（包括自身）dp[i][j][1]: i,j上边连续的1的个数（包括自身）思路来自于题解 Java动态规划。
c++代码 class Solution { public: int largest1BorderedSquare(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; grid) { if (grid.empty()) { return 0; } int res = 0; int m = grid.size(); int n = grid[0].size(); vector&amp;lt;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt; dp(m + 1, vector(n + 1, vector(2, 0))); for (int i = 1; i &amp;lt;= m; i++) { for (int j = 1; j &amp;lt;= n; j++) { if (grid[i - 1][j - 1]) { dp[i][j][0] = dp[i][j - 1][0] + 1; dp[i][j][1] = dp[i - 1][j][1] + 1; int len = min(dp[i][j][0], dp[i][j][1]); while (len &amp;gt; res) { if (dp[i - len + 1][j][0] &amp;gt;= len &amp;amp;&amp;amp; dp[i][j - len + 1][1] &amp;gt;= len) { break; } len--; } res = max(res, len); } } } return res * res; } }; 几个注意点 写一下做了几个与这个类似的题之后，我的一些个人总结。</description>
    </item>
    
    <item>
      <title>前缀和模板</title>
      <link>https://chinwer.github.io/blog/prefix-sum/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/prefix-sum/</guid>
      <description>一维前缀和 vector&amp;lt;int&amp;gt; one_dimension_prefix(vector&amp;lt;int&amp;gt; nums) { int n = nums.size(); vector&amp;lt;int&amp;gt; prefix(n + 1); for (int i = 1; i &amp;lt;= n; i++) { prefix[i] = prefix[i - 1] + nums[i - 1]; } return prefix; } 二维前缀和 vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; two_dimension_prefix(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; nums) { int m = nums.size(); int n = nums[0].size(); vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; prefix(m + 1, vector(n + 1, 0)); for (int i = 1; i &amp;lt;= m; i++) { for (int j = 1; j &amp;lt;= n; j++) { prefix[i][j] = nums[i][j] + prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1]; } } return prefix; } </description>
    </item>
    
    <item>
      <title>力扣总结：1372. 二叉树的最长交错路径</title>
      <link>https://chinwer.github.io/blog/leetcode-1372/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-1372/</guid>
      <description>题目链接 二叉树的最长交错路径
题目描述 给你一棵以 root 为根的二叉树，二叉树中的交错路径定义如下：
 选择二叉树中 任意 节点和一个方向（左或者右）。 如果前进方向为右，那么移动到当前节点的的右子节点，否则移动到它的左子节点。 改变前进方向：左变右或者右变左。 重复第二步和第三步，直到你在树中无法继续移动。 交错路径的长度定义为：访问过的节点数目 - 1（单个节点的路径长度为 0 ）。  请你返回给定树中最长 交错路径 的长度。
思路 以下两种思路均来源于 官方题解。
DFS   核心思路
采用深度优先搜索的策略，从上到下遍历整棵树，遍历的同时维护变量 $is\_left$ 和 $len$ ，其含义如下：
 $is\_left$ ：当前节点是否应该往左走。 $len$ ：当目前为止，已经满足要求的交错路径的长度。  对于当前节点，如果应该往左走，也就是 $is\_left$ 为 $true$，并且它有左孩子，就往左走，并且 $len$ 加一，否则如果有右孩子的话就往右走，同时将 $len$ 重置为1。$is\_left$ 为 $false$ 时对称处理。
  c++代码
class Solution { private: int res = 0; public: int longestZigZag(TreeNode* root) { if (!root) { return 0; } dfs(root, true, 0); dfs(root, false, 0); return res; } void dfs(TreeNode *root, bool is_left, int len) { res = max(res, len); if (is_left) { if (root-&amp;gt;left) { dfs(root-&amp;gt;left, false, len + 1); } if (root-&amp;gt;right) { dfs(root-&amp;gt;right, true, 1); } } else { if (root-&amp;gt;right) { dfs(root-&amp;gt;right, true, len + 1); } if (root-&amp;gt;left) { dfs(root-&amp;gt;left, false, 1); } } } };   几个注意的地方</description>
    </item>
    
    <item>
      <title>力扣总结：1140. 石子游戏 II</title>
      <link>https://chinwer.github.io/blog/leetcode-1140/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-1140/</guid>
      <description>题目链接 石子游戏 II
题目描述 亚历克斯和李继续他们的石子游戏。许多堆石子 排成一行，每堆都有正整数颗石子 piles[i]。游戏以谁手中的石子最多来决出胜负。
亚历克斯和李轮流进行，亚历克斯先开始。最初，M = 1。
在每个玩家的回合中，该玩家可以拿走剩下的 前 X 堆的所有石子，其中 1 &amp;lt;= X &amp;lt;= 2M。然后，令 M = max(M, X)。
游戏一直持续到所有石子都被拿走。
假设亚历克斯和李都发挥出最佳水平，返回亚历克斯可以得到的最大数量的石头。
示例  输入：piles = [2,7,9,4,4]
输出：10
解释：
如果亚历克斯在开始时拿走一堆石子，李拿走两堆，接着亚历克斯也拿走两堆。在这种情况下，亚历克斯可以拿到 2 + 4 + 4 = 10 颗石子。
如果亚历克斯在开始时拿走两堆石子，那么李就可以拿走剩下全部三堆石子。在这种情况下，亚历克斯可以拿到 2 + 7 = 9 颗石子。 所以我们返回更大的 10。
 思路   动态规划状态定义
记 $n$ 为输入 $piles$ 的长度，即石子堆的个数，定义一个 $n \times n$ 的二维 $dp$ 数组，其中 $dp[i][j]$ 代表当剩下的石子堆为 $piles[i&amp;hellip;n - 1]$ 且 $M = j$ 时当前玩家能拿到的最大石子数目。</description>
    </item>
    
    <item>
      <title>力扣总结：877. 石子游戏</title>
      <link>https://chinwer.github.io/blog/leetcode-877/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-877/</guid>
      <description>题目链接 石子游戏
题目描述 亚历克斯和李用几堆石子在做游戏。偶数堆石子排成一行，每堆都有正整数颗石子 $piles[i]$ 。
游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。
亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。
假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回 $true$，当李赢得比赛时返回 $false$。
示例  输入：[5, 3, 4, 5]
输出：true
解释：
亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。 假设他取了前 5 颗，这一行就变成了 [3,4,5] 。 如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。 如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。 这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。
 思路一   动态规划状态的定义
此思路来自这里，简单来说，此思路核心为一个二维的 $n\times n$ 的 $dp$ 数组，数组中每个元素均为一个 $pair$ 对，其中：
 $dp[i][j].first$ 表示对于 $piles[i&amp;hellip;j]$ 这部分石头堆，先手能获得的最高分数。 $dp[i][j].</description>
    </item>
    
    <item>
      <title>斜向遍历二维数组 </title>
      <link>https://chinwer.github.io/blog/two-dimension-array-oblique-traversal/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/two-dimension-array-oblique-traversal/</guid>
      <description>在动态规划中有时会需要斜着遍历二维数组，在这里用c++简单记录一下遍历的代码：
vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; dp(n, vector(n, 0)); for (int l = 2; l &amp;lt;= n; l++) { for (int i = 0; i &amp;lt; n; i++) { int j = l + i - 1; /* Visit dp[i][j] */ } } </description>
    </item>
    
    <item>
      <title>力扣总结：105. 从前序与中序遍历序列构造二叉树</title>
      <link>https://chinwer.github.io/blog/leetcode-105/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-105/</guid>
      <description>题目链接 105. 从前序遍历与中序遍历序列构造二叉树
题目要求 根据一棵树的前序遍历与中序遍历构造二叉树，你可以假设树中没有重复元素。
思路   递归版本
  核心思路
  $preorder$ 前序遍历序列的第一项肯定是根节点：[根 | 左 | 右]；
  根据根节点在 $inorder$ 中序遍历序列中的位置，将其分割为 [左 | 根 | 右] 三个部分；
  通过 $inorder$ 中确定的左右子树的结点个数，在 $preorder$ 中确定左右子树的序列；
  对左右子树，递归重复上述操作。
    c++代码
struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; class Solution { public: TreeNode* buildTree(vector&amp;lt;int&amp;gt;&amp;amp; preorder, vector&amp;lt;int&amp;gt;&amp;amp; inorder) { map&amp;lt;int, int&amp;gt; pos; int presize = preorder.</description>
    </item>
    
    <item>
      <title>BFS的两个解题模板</title>
      <link>https://chinwer.github.io/blog/bfs-template/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/bfs-template/</guid>
      <description>BFS模板 BFS使用队列，将每个目前未搜索的结点依次入队，然后弹出队列首部元素进行遍历，一般有两个模板：
  不需要确定当前遍历到了哪一层
while (!queue.empty()) { cur = queue.front(); queue.pop(); for (node : adjacents_of(cur)) { if (node is valid &amp;amp;&amp;amp; has not been accessed) { queue.push(node) } } } 力扣中用到此模板的常见题目有：
 二叉树的最大深度    需要确定当前遍历到了哪一层
int level = 0; while (!queue.empty()) { int size = queue.size(); for (int i = 0; i &amp;lt; size; i++) { cur = queue.front(); queue.pop(); for (node : adjacents_of(cur)) { if (node is valid &amp;amp;&amp;amp; has not been accessed) { queue.</description>
    </item>
    
    <item>
      <title>二叉树的几种遍历方式总结</title>
      <link>https://chinwer.github.io/blog/binary-tree-traversal/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/binary-tree-traversal/</guid>
      <description>记录一下二叉树的几种遍历方式的代码模板，包括前序、中序、后序及层次遍历，均用c++实现。
先序遍历   递归版本
void preorder_traversal(TreeNode *root) { if (!root) { return; } /* Visit the current node */ preorder_traversal(root-&amp;gt;left); preorder_traversal(root-&amp;gt;right); }   迭代版本一
void preorder_traversal(TreeNode *root) { stack&amp;lt;TreeNode *&amp;gt; s; s.push(root); while (!s.empty()) { TreeNode *node = s.top(); s.pop(); if (node) { /* Visit the current node */ s.push(root-&amp;gt;right); s.push(root-&amp;gt;left); } } }   迭代版本二
void preorder_traversal(TreeNode *root) { stack&amp;lt;TreeNode *&amp;gt; s; TreeNode *node = root; while (node || !</description>
    </item>
    
    <item>
      <title>Chevereto安装总结</title>
      <link>https://chinwer.github.io/blog/chevereto/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/chevereto/</guid>
      <description>Chevereto介绍 Chevereto是一款私人图床服务器软件，可以进行图片的存储、处理及分发。昨晚折腾了一个小时，终于是把Chevereto在服务器上搭好了，在此做下总结。
安装环境 我使用的LAMP环境，具体如下：
 Linux version 4.18.0, CentOS Linux release 8.1.1911 Apache 2.4.37 (centos) Mysql 8.0.17 PHP 7.2.11  上面几个依赖的安装就不说了，基本上用yum install xxx安装就行了。
Chevereto源码安装 我的网页根目录为apache默认的/var/www/html，因此在此目录下克隆Chevereto的github项目即可。
这里要注意正确设置克隆后的Chevereto文件夹用户权限。如我的apache服务的用户是apache，那么设置Chevereto权限如下：
sudo chown -R apache:apache /var/www/html/Chevereto 同时，需要保证apache用户对此文件夹有写权限：
sudo chmod -R 700 Chevereto 即只有此文件夹的所有者（apache）具有读、写以及执行的权限。
然而实际上发现这样的话打开网页会403 Forbidden，所以直接设置所有人对此目录可读写及执行了（逃~）：
sudo chmod -R 777 Chevereto Mysql数据库设置 为了Chevereto能够正常存储图片，需要给它专门创建一个数据库和数据库用户，这里我首先创建一个名为imagesuser的mysql用户以及一个名为images的数据库，然后授权该用户对此数据库拥有所有权限：
 以root用户的身份登录到数据库：  mysql -u root -p 创建一个用户名为imagesuser，密码为0924的用户：  create user imagesuser identified by 0924; 创建一个名为images的数据库：  create database images; 授权该用户对此数据库拥有全部权限：  grant all on images.</description>
    </item>
    
    <item>
      <title>力扣总结：1248. 统计优美子数组</title>
      <link>https://chinwer.github.io/blog/leetcode-1248/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-1248/</guid>
      <description>方法一：数学   思路和算法
  用一个 $odd$ 数组记录第 $i$ 个奇数的下标。因此子数组 $[odd[i], odd[i+k-1]]$ 恰好包含 $k$ 个奇数 ；
  同时，子数组 $(odd[i-1], odd[i])$ 及 $(odd[i+k-1], odd[i+k])$ 均为偶数。因此所有起始点为第 $i$ 个奇数的“优美”数组的个数即为：
    c++代码
class Solution { public: int numberOfSubarrays(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) { vector&amp;lt;int&amp;gt; odds = { -1 }; int size = nums.size(); for (int i = 0; i &amp;lt; size; i++) { if (nums[i] &amp;amp; 1) { // nums[i] is an odd number  odds.</description>
    </item>
    
    <item>
      <title>力扣总结：5. 最长回文子串</title>
      <link>https://chinwer.github.io/blog/leetcode-5/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-5/</guid>
      <description>题目要求 给定一个字符串 $s$ ，找到 $s$ 中最长的回文子串。你可以假设 $s$ 的最大长度为1000
思路 一、动态规划法   核心思路
 如果一个字符串的头尾两个字符不一样，则它一定不是回文的； 否则：  如果里面的子串是回文，则整体为回文； 否则不是回文。      状态转移方程
记 $dp[i][j]$ 表示子串 $s[i..j]$ 是否为回文子串，则有：
dp[i][j] = (s[i] == s[j]) &amp;amp;&amp;amp; dp[i + 1][j - 1]   边界条件
当 $s[i] == s[j]$ 且 $j - i &amp;lt; 3$ 时直接有： $dp[i][j] = true$
  原题解
动态规划法
  二、中心扩散法   核心思路
遍历每一个索引，以其为中心向两边进行扩散。枚举中心位置的复杂度为 $O(n)$ ，从中心位置得到回文子串的复杂度为 $O(n)$，因此整体复杂度为 $O(N^2)$ 。</description>
    </item>
    
    <item>
      <title>manjaro安装总结</title>
      <link>https://chinwer.github.io/blog/manjaro/</link>
      <pubDate>Sun, 22 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/manjaro/</guid>
      <description>鼓捣了一天 manjaro 系统，在室友的大力帮助下终于把基本的环境、包都配置好了，在此按照系统安装之后的时间顺序稍做记录，以便后续翻阅备用。
将 pacman 源更改为清华镜像源 pacman 为 manjaro 默认的软件包管理工具，它将一个简单的二进制包格式和易用的构建系统结合了起来。不管软件包是来自官方的 Arch 库还是用户自己创建，Pacman 都能方便的管理。
但是 pacman 默认源在国外，因此安装包时速度会很慢，所以第一步将 pacman 的源更改为清华镜像源。
在终端输入以下命令：
sudo pacman-mirrors -i -c China -m rank 更新系统（所有的包） 在终端输入以下命令：
sudo pacman -Syyu 安装 alacritty alacritty 是 linux 上一个使用 gpu 进行渲染的终端模拟器（windows 也能安装，本人没试过也不想试，有了 linux 终端谁还记得 windows 呢）。其他简介、优点说明就省了，具体安装如下：（安装包的话找 pacman 就完事儿了）
sudo pacman -S alacritty 设置 i3 的默认终端为 alacritty（修改 i3 配置文件，文件路径见后文）：
bindsym $mod+Return exec alacritty 找到这一行并将 exec 后的终端改为 alacritty （上面已修改）。
安装窗口管理器 i3 i3 是 linux 系统上的一个平铺窗口管理器，简而言之在这里能够用键盘完全代替鼠标进行操作，而且还自带分屏及分屏排列等功能，完虐 windows 手动分屏功能（而且还只支持两分屏及四分屏），具体安装如下：</description>
    </item>
    
    <item>
      <title>一篇简单的感想&amp;总结</title>
      <link>https://chinwer.github.io/blog/blog-review/</link>
      <pubDate>Sat, 14 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/blog-review/</guid>
      <description>最近看到一篇文章：清华大学计算机专业本科这位在「自己写的 CPU 上运行自己写的操作系统」的同学是什么水平？ - 知乎。看完后感受颇深：同龄人简历上写的项目经历，自己竟然连名字是什么意思都看不懂。还没来得及感慨贵系优秀同学与自己之间的巨大差距，今天又仔细阅读了几篇程序员大佬的编程经历回顾博客，真是感到“革命尚未成功，同志仍需努力”的任重道远之情啊！为了勉励自己继续奋力前行，在此记录一下自己这几天的阅读（围观神仙）感想。
一、保持兴趣与热情 从小看过很多各领域精英的采访记录，具体的各种心路历程、经历分享已经记不清了， 脑海中唯独只留下了一个印象：真正站在顶峰的人，从来不是按部就班跟着老师的步伐成长起来的，更多的是兴趣使然，让自己去学习高于甚至远高于课程的知识。当然我并不是否认一步一个脚印跟着老师踏踏实实学习的重要性。相反，这是一个人成长关键的一步。一个优秀老师的悉心教导，永远胜于自己一个人拿着书本死磕。但若想做到别人做不到的事，学会别人不会的新本领，只能去课本之外寻找答案。
今年是我在清华软院本科的第三年，当初选择计算机专业，真的是处出于纯粹的兴趣。尽管高中时除了只会用电脑上网玩游戏之外，其他计算机专业知识一窍不通，但填志愿时看着志愿书上数不清的各种专业，我的眼中只有计算机三个字。而这两年走来，虽然见识到了园子里各种各样的大佬，虽然专业课的成绩并不是那么中看，但我依然对编程，对自己的专业保持着极高的热情。而这份热情，也是激励着我每学期都比上学期更加进步的重要原因之一。
大一上的弹幕游戏大作业、Qt小学期的怪怪水族馆游戏大作业，大二上的新闻网页信息提取大作业，前端小学期的微信小游戏开发大作业以及后端小学期的django图片处理网页的实现，所有的这些任务，几乎都是以一片空白开始，中途也少不了各种bug调试、资料搜索。虽然过程一个比一个困难，但在忍受着被bug支配的痛苦的同时，我也享受着编程带给我的快乐以及任务完成后一个比一个强烈的成就感。可曾试想，若是没有对自己所学知识的兴趣驱使着我不断前行，恐怕自己早已在这场与同龄人相互竞争、成长的博弈中草草退场。
二、上课真的不能翘 在清华学习了两年，学到的不仅是课上老师讲授的专业知识，还有自己那自以为是的翘课本领：顶着“这课老师讲的真不怎么样”、“反正有ppt，我自己看也能学懂”的各种借口来睡懒觉、翘课、不跟着老师进度来。看了你为什么要来上课并且认真参与这篇文章后发现自己俨然就是作者所言大学生中的一个典型，同时也发现了自己其实一直有注意到但却没有留意的问题：不上课、不认真听讲带来的最直接后果便是无法集中注意力。
不知什么时候起，我发现自己竟然很难坐在教室听老师讲完一大节甚至一小节课，很难在下定决心赶作业时坚持半个小时以上。这是自己从小“吊儿郎当”、“浮躁”的后遗症。然而进入大学两年之久，我竟没有将它改正，反而让它发展得愈加严重。
除了注意力无法集中之外，“自学”课程知识带来的更直接的后果是对知识掌握不牢固。人家是上课认认真真听老师讲完全程，认真完成作业，甚至还会课后再次回顾巩固。而自己却是只粗粗略读课件中与作业有关的部分，直到临近考试才将一学期所有的课件临时回顾，后果便是自以为了解、掌握了的知识，在考场中根本想不起具体如何运用。
这学期是入学以来课程数量最少的一学期，但是一看到摆在课表上的四门专业课，我只能对自己说：真的不能翘了啊喂！再翘真的就死翘翘了啊！
三、一定要找到节奏 站在大三的起点，回顾自己大一的成绩表，真的只能用不堪入目四字来形容，都xx考的什么玩意儿！线代、微积分、程设甚至体育，都有那么难吗？如果再来一次，我还会考成那样吗?虽然知道自己的回答是不会，但我很清楚永远不会再有第二次了：如果“如果”有用的话，又要努力干什么用呢？
所幸自己从大二开始良心发现，慢慢找到了在这个园子里生活学习的“节奏”，不仅心态变好了，学习方面也在不断进步，至少大二的专业课绩点也还勉强看得过去，前端小学期的助教和老师也大大方方给了我一个A-。（真的很开心了，自己在家一个人苦苦学习cocos、苦苦盯着屏幕一整天一整天还调不出来bug的十多天没有白费啊！）
总而言之，除了兴趣、踏实之外，节奏是真的不能少的一个东西：找到节奏，才能安排好时间，才能好好地完成课程之内的工作，才能进一步有时间学习课程之外的新知识，而这些又会对你的学习进行“正反馈”，让你能够更加自信的面对下一阶段的生活学习。
四、一点反思 当然写了这么多，目的不在于停下来沉浸在短时间、微小的成就上，而是要提醒自己还有很大的进步空间。比如，人家的兴趣在于独立编写行数过万的游戏、独立实现脚本引擎和Pascal语言解释器（进入 2012 &amp;ndash; 回顾我走过的编程之路），而自己的兴趣却被仅仅限制在了课程之内，根本无暇顾及课程之外更加精彩纷呈的世界。
除此之外，注意力无法长时间集中的问题也亟待解决：一个空有一身口号，到关键时刻却永远无法专注于当下的人，永远只是一个无用之人。
环顾四周，远比自己优秀的人比比皆是，自己的目标、家人的期望还远远没有达到，那还有什么借口继续驻足原地，止步不前呢？人生没有等出来的美丽，只有拼出来的辉煌。Wanna make it to the top? Go, now.</description>
    </item>
    
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://chinwer.github.io/blog/markdown-syntax/</link>
      <pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/markdown-syntax/</guid>
      <description>&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>