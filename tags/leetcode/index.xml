<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on 邱圆辉的博客</title>
    <link>https://chinwer.github.io/tags/leetcode/</link>
    <description>Recent content in leetcode on 邱圆辉的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 17 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chinwer.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>力扣总结：956. 最高的广告牌</title>
      <link>https://chinwer.github.io/blog/leetcode-956/</link>
      <pubDate>Mon, 17 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-956/</guid>
      <description>题目链接 956. 最高的广告牌
题目描述 你正在安装一个广告牌，并希望它高度最大。这块广告牌将有两个钢制支架，两边各一个。每个钢支架的高度必须相等。
你有一堆可以焊接在一起的钢筋 rods。举个例子，如果钢筋的长度为 1、2 和 3，则可以将它们焊接在一起形成长度为 6 的支架。
返回广告牌的最大可能安装高度。如果没法安装广告牌，请返回 0。
示例 输入：[1,2,3,6]输出：6解释：我们有两个不相交的子集 {1,2,3} 和 {6}，它们具有相同的和 sum = 6。思路一   思路来源
来源一，来源二
  状态定义
dp[i][j]：将前 i 个钢管分成两个集合，集合值为 j 时，子集和的最大值  状态转移
  不用第 $i$ 个钢管，此时有： $$ dp[i][j] = dp[i - 1][j] $$
  把第 $i$ 个钢管放在子集和较大的一边，此时有： $$ dp[i][k] = max(dp[i][k], dp[i - 1][j] + rods[i]), k = j + rods[i] $$</description>
    </item>
    
    <item>
      <title>力扣总结：650. 只有两个键的键盘</title>
      <link>https://chinwer.github.io/blog/leetcode-650/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-650/</guid>
      <description>题目描述 最初在一个记事本上只有一个字符 &amp;lsquo;A&amp;rsquo;。你每次可以对这个记事本进行两种操作：
 Copy All (复制全部) : 你可以复制这个记事本中的所有字符(部分的复制是不允许的)。 Paste (粘贴) : 你可以粘贴你上一次复制的字符。 给定一个数字 n 。你需要使用最少的操作次数，在记事本中打印出 恰好 n 个 &amp;lsquo;A&amp;rsquo;。输出能够打印出 n 个 &amp;lsquo;A&amp;rsquo; 的最少操作次数。  示例 输入: 3输出: 3解释:最初, 我们只有一个字符 &#39;A&#39;。第 1 步, 我们使用 Copy All 操作。第 2 步, 我们使用 Paste 操作来获得 &#39;AA&#39;。第 3 步, 我们使用 Paste 操作来获得 &#39;AAA&#39;。思路一 具体思路就懒得写了，反正是写给自己看的，详情可参考题解：动态规划。
  dp 数组定义
dp[i][j]: 要使得当前记事本上 &#39;A&#39; 的个数为 i，且缓冲区 &#39;A&#39; 的个数为 j 的最小步数  状态转移方程为：</description>
    </item>
    
    <item>
      <title>几个矩阵有关的题</title>
      <link>https://chinwer.github.io/blog/leetcode-matrix/</link>
      <pubDate>Sun, 09 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-matrix/</guid>
      <description>第1139题 题目链接 1139. 最大的以1为边界的正方形
题目描述 给你一个由若干 0 和 1 组成的二维网格 grid，请你找出边界全部由 1 组成的最大 正方形 子网格，并返回该子网格中的元素数量。如果不存在，则返回 0。
示例 输入：grid = [[1,1,1],[1,0,1],[1,1,1]]输出：9输入：grid = [[1, 1, 0, 0]]输出：1思路 DP数组的定义
dp[i][j][0]: i,j左边连续的1的个数（包括自身）dp[i][j][1]: i,j上边连续的1的个数（包括自身）思路来自于题解 Java动态规划。
c++代码 class Solution { public: int largest1BorderedSquare(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; grid) { if (grid.empty()) { return 0; } int res = 0; int m = grid.size(); int n = grid[0].size(); vector&amp;lt;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt; dp(m + 1, vector(n + 1, vector(2, 0))); for (int i = 1; i &amp;lt;= m; i++) { for (int j = 1; j &amp;lt;= n; j++) { if (grid[i - 1][j - 1]) { dp[i][j][0] = dp[i][j - 1][0] + 1; dp[i][j][1] = dp[i - 1][j][1] + 1; int len = min(dp[i][j][0], dp[i][j][1]); while (len &amp;gt; res) { if (dp[i - len + 1][j][0] &amp;gt;= len &amp;amp;&amp;amp; dp[i][j - len + 1][1] &amp;gt;= len) { break; } len--; } res = max(res, len); } } } return res * res; } }; 几个注意点 写一下做了几个与这个类似的题之后，我的一些个人总结。</description>
    </item>
    
    <item>
      <title>前缀和模板</title>
      <link>https://chinwer.github.io/blog/prefix-sum/</link>
      <pubDate>Sat, 08 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/prefix-sum/</guid>
      <description>一维前缀和 vector&amp;lt;int&amp;gt; one_dimension_prefix(vector&amp;lt;int&amp;gt; nums) { int n = nums.size(); vector&amp;lt;int&amp;gt; prefix(n + 1); for (int i = 1; i &amp;lt;= n; i++) { prefix[i] = prefix[i - 1] + nums[i - 1]; } return prefix; } 二维前缀和 vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; two_dimension_prefix(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; nums) { int m = nums.size(); int n = nums[0].size(); vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; prefix(m + 1, vector(n + 1, 0)); for (int i = 1; i &amp;lt;= m; i++) { for (int j = 1; j &amp;lt;= n; j++) { prefix[i][j] = nums[i][j] + prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1]; } } return prefix; } </description>
    </item>
    
    <item>
      <title>力扣总结：1372. 二叉树的最长交错路径</title>
      <link>https://chinwer.github.io/blog/leetcode-1372/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-1372/</guid>
      <description>题目链接 二叉树的最长交错路径
题目描述 给你一棵以 root 为根的二叉树，二叉树中的交错路径定义如下：
 选择二叉树中 任意 节点和一个方向（左或者右）。 如果前进方向为右，那么移动到当前节点的的右子节点，否则移动到它的左子节点。 改变前进方向：左变右或者右变左。 重复第二步和第三步，直到你在树中无法继续移动。 交错路径的长度定义为：访问过的节点数目 - 1（单个节点的路径长度为 0 ）。  请你返回给定树中最长 交错路径 的长度。
思路 以下两种思路均来源于 官方题解。
DFS   核心思路
采用深度优先搜索的策略，从上到下遍历整棵树，遍历的同时维护变量 $is\_left$ 和 $len$ ，其含义如下：
 $is\_left$ ：当前节点是否应该往左走。 $len$ ：当目前为止，已经满足要求的交错路径的长度。  对于当前节点，如果应该往左走，也就是 $is\_left$ 为 $true$，并且它有左孩子，就往左走，并且 $len$ 加一，否则如果有右孩子的话就往右走，同时将 $len$ 重置为1。$is\_left$ 为 $false$ 时对称处理。
  c++代码
class Solution { private: int res = 0; public: int longestZigZag(TreeNode* root) { if (!root) { return 0; } dfs(root, true, 0); dfs(root, false, 0); return res; } void dfs(TreeNode *root, bool is_left, int len) { res = max(res, len); if (is_left) { if (root-&amp;gt;left) { dfs(root-&amp;gt;left, false, len + 1); } if (root-&amp;gt;right) { dfs(root-&amp;gt;right, true, 1); } } else { if (root-&amp;gt;right) { dfs(root-&amp;gt;right, true, len + 1); } if (root-&amp;gt;left) { dfs(root-&amp;gt;left, false, 1); } } } };   几个注意的地方</description>
    </item>
    
    <item>
      <title>力扣总结：1140. 石子游戏 II</title>
      <link>https://chinwer.github.io/blog/leetcode-1140/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-1140/</guid>
      <description>题目链接 石子游戏 II
题目描述 亚历克斯和李继续他们的石子游戏。许多堆石子 排成一行，每堆都有正整数颗石子 piles[i]。游戏以谁手中的石子最多来决出胜负。
亚历克斯和李轮流进行，亚历克斯先开始。最初，M = 1。
在每个玩家的回合中，该玩家可以拿走剩下的 前 X 堆的所有石子，其中 1 &amp;lt;= X &amp;lt;= 2M。然后，令 M = max(M, X)。
游戏一直持续到所有石子都被拿走。
假设亚历克斯和李都发挥出最佳水平，返回亚历克斯可以得到的最大数量的石头。
示例  输入：piles = [2,7,9,4,4]
输出：10
解释：
如果亚历克斯在开始时拿走一堆石子，李拿走两堆，接着亚历克斯也拿走两堆。在这种情况下，亚历克斯可以拿到 2 + 4 + 4 = 10 颗石子。
如果亚历克斯在开始时拿走两堆石子，那么李就可以拿走剩下全部三堆石子。在这种情况下，亚历克斯可以拿到 2 + 7 = 9 颗石子。 所以我们返回更大的 10。
 思路   动态规划状态定义
记 $n$ 为输入 $piles$ 的长度，即石子堆的个数，定义一个 $n \times n$ 的二维 $dp$ 数组，其中 $dp[i][j]$ 代表当剩下的石子堆为 $piles[i&amp;hellip;n - 1]$ 且 $M = j$ 时当前玩家能拿到的最大石子数目。</description>
    </item>
    
    <item>
      <title>力扣总结：877. 石子游戏</title>
      <link>https://chinwer.github.io/blog/leetcode-877/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-877/</guid>
      <description>题目链接 石子游戏
题目描述 亚历克斯和李用几堆石子在做游戏。偶数堆石子排成一行，每堆都有正整数颗石子 $piles[i]$ 。
游戏以谁手中的石子最多来决出胜负。石子的总数是奇数，所以没有平局。
亚历克斯和李轮流进行，亚历克斯先开始。 每回合，玩家从行的开始或结束处取走整堆石头。 这种情况一直持续到没有更多的石子堆为止，此时手中石子最多的玩家获胜。
假设亚历克斯和李都发挥出最佳水平，当亚历克斯赢得比赛时返回 $true$，当李赢得比赛时返回 $false$。
示例  输入：[5, 3, 4, 5]
输出：true
解释：
亚历克斯先开始，只能拿前 5 颗或后 5 颗石子 。 假设他取了前 5 颗，这一行就变成了 [3,4,5] 。 如果李拿走前 3 颗，那么剩下的是 [4,5]，亚历克斯拿走后 5 颗赢得 10 分。 如果李拿走后 5 颗，那么剩下的是 [3,4]，亚历克斯拿走后 4 颗赢得 9 分。 这表明，取前 5 颗石子对亚历克斯来说是一个胜利的举动，所以我们返回 true 。
 思路一   动态规划状态的定义
此思路来自这里，简单来说，此思路核心为一个二维的 $n\times n$ 的 $dp$ 数组，数组中每个元素均为一个 $pair$ 对，其中：
 $dp[i][j].first$ 表示对于 $piles[i&amp;hellip;j]$ 这部分石头堆，先手能获得的最高分数。 $dp[i][j].</description>
    </item>
    
    <item>
      <title>力扣总结：105. 从前序与中序遍历序列构造二叉树</title>
      <link>https://chinwer.github.io/blog/leetcode-105/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-105/</guid>
      <description>题目链接 105. 从前序遍历与中序遍历序列构造二叉树
题目要求 根据一棵树的前序遍历与中序遍历构造二叉树，你可以假设树中没有重复元素。
思路   递归版本
  核心思路
  $preorder$ 前序遍历序列的第一项肯定是根节点：[根 | 左 | 右]；
  根据根节点在 $inorder$ 中序遍历序列中的位置，将其分割为 [左 | 根 | 右] 三个部分；
  通过 $inorder$ 中确定的左右子树的结点个数，在 $preorder$ 中确定左右子树的序列；
  对左右子树，递归重复上述操作。
    c++代码
struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; class Solution { public: TreeNode* buildTree(vector&amp;lt;int&amp;gt;&amp;amp; preorder, vector&amp;lt;int&amp;gt;&amp;amp; inorder) { map&amp;lt;int, int&amp;gt; pos; int presize = preorder.</description>
    </item>
    
    <item>
      <title>BFS的两个解题模板</title>
      <link>https://chinwer.github.io/blog/bfs-template/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/bfs-template/</guid>
      <description>BFS模板 BFS使用队列，将每个目前未搜索的结点依次入队，然后弹出队列首部元素进行遍历，一般有两个模板：
  不需要确定当前遍历到了哪一层
while (!queue.empty()) { cur = queue.front(); queue.pop(); for (node : adjacents_of(cur)) { if (node is valid &amp;amp;&amp;amp; has not been accessed) { queue.push(node) } } } 力扣中用到此模板的常见题目有：
 二叉树的最大深度    需要确定当前遍历到了哪一层
int level = 0; while (!queue.empty()) { int size = queue.size(); for (int i = 0; i &amp;lt; size; i++) { cur = queue.front(); queue.pop(); for (node : adjacents_of(cur)) { if (node is valid &amp;amp;&amp;amp; has not been accessed) { queue.</description>
    </item>
    
    <item>
      <title>力扣总结：1248. 统计优美子数组</title>
      <link>https://chinwer.github.io/blog/leetcode-1248/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-1248/</guid>
      <description>方法一：数学   思路和算法
  用一个 $odd$ 数组记录第 $i$ 个奇数的下标。因此子数组 $[odd[i], odd[i+k-1]]$ 恰好包含 $k$ 个奇数 ；
  同时，子数组 $(odd[i-1], odd[i])$ 及 $(odd[i+k-1], odd[i+k])$ 均为偶数。因此所有起始点为第 $i$ 个奇数的“优美”数组的个数即为：
    c++代码
class Solution { public: int numberOfSubarrays(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) { vector&amp;lt;int&amp;gt; odds = { -1 }; int size = nums.size(); for (int i = 0; i &amp;lt; size; i++) { if (nums[i] &amp;amp; 1) { // nums[i] is an odd number  odds.</description>
    </item>
    
    <item>
      <title>力扣总结：5. 最长回文子串</title>
      <link>https://chinwer.github.io/blog/leetcode-5/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-5/</guid>
      <description>题目要求 给定一个字符串 $s$ ，找到 $s$ 中最长的回文子串。你可以假设 $s$ 的最大长度为1000
思路 一、动态规划法   核心思路
 如果一个字符串的头尾两个字符不一样，则它一定不是回文的； 否则：  如果里面的子串是回文，则整体为回文； 否则不是回文。      状态转移方程
记 $dp[i][j]$ 表示子串 $s[i..j]$ 是否为回文子串，则有：
dp[i][j] = (s[i] == s[j]) &amp;amp;&amp;amp; dp[i + 1][j - 1]   边界条件
当 $s[i] == s[j]$ 且 $j - i &amp;lt; 3$ 时直接有： $dp[i][j] = true$
  原题解
动态规划法
  二、中心扩散法   核心思路
遍历每一个索引，以其为中心向两边进行扩散。枚举中心位置的复杂度为 $O(n)$ ，从中心位置得到回文子串的复杂度为 $O(n)$，因此整体复杂度为 $O(N^2)$ 。</description>
    </item>
    
  </channel>
</rss>