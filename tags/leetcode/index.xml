<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leetcode on 邱圆辉的博客</title>
    <link>https://chinwer.github.io/tags/leetcode/</link>
    <description>Recent content in leetcode on 邱圆辉的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 19 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://chinwer.github.io/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>力扣总结：105. 从前序与中序遍历序列构造二叉树</title>
      <link>https://chinwer.github.io/blog/leetcode-105/</link>
      <pubDate>Sun, 19 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-105/</guid>
      <description>题目链接 105. 从前序遍历与中序遍历序列构造二叉树
题目要求 根据一棵树的前序遍历与中序遍历构造二叉树，你可以假设树中没有重复元素。
思路   递归版本
  核心思路
  $preorder$ 前序遍历序列的第一项肯定是根节点：[根 | 左 | 右]；
  根据根节点在 $inorder$ 中序遍历序列中的位置，将其分割为 [左 | 根 | 右] 三个部分；
  通过 $inorder$ 中确定的左右子树的结点个数，在 $preorder$ 中确定左右子树的序列；
  对左右子树，递归重复上述操作。
    c++代码
struct TreeNode { int val; TreeNode *left; TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) {} }; class Solution { public: TreeNode* buildTree(vector&amp;lt;int&amp;gt;&amp;amp; preorder, vector&amp;lt;int&amp;gt;&amp;amp; inorder) { map&amp;lt;int, int&amp;gt; pos; int presize = preorder.</description>
    </item>
    
    <item>
      <title>BFS的两个解题模板</title>
      <link>https://chinwer.github.io/blog/bfs-template/</link>
      <pubDate>Sat, 18 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/bfs-template/</guid>
      <description>BFS模板 BFS使用队列，将每个目前未搜索的结点依次入队，然后弹出队列首部元素进行遍历，一般有两个模板：
  不需要确定当前遍历到了哪一层
while (!queue.empty()) { cur = queue.front(); queue.pop(); for (node : adjacents_of(cur)) { if (node is valid &amp;amp;&amp;amp; has not been accessed) { queue.push(node) } } } 力扣中用到此模板的常见题目有：
 二叉树的层序遍历 二叉树的最大深度    需要确定当前遍历到了哪一层
int level = 0; while (!queue.empty()) { int size = queue.size(); for (int i = 0; i &amp;lt; size; i++) { cur = queue.front(); queue.pop(); for (node : adjacents_of(cur)) { if (node is valid &amp;amp;&amp;amp; has not been accessed) { queue.</description>
    </item>
    
    <item>
      <title>力扣总结：1248. 统计优美子数组</title>
      <link>https://chinwer.github.io/blog/leetcode-1248/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-1248/</guid>
      <description>方法一：数学   思路和算法
  用一个 $odd$ 数组记录第 $i$ 个奇数的下标。因此子数组 $[odd[i], odd[i+k-1]]$ 恰好包含 $k$ 个奇数 ；
  同时，子数组 $(odd[i-1], odd[i])$ 及 $(odd[i+k-1], odd[i+k])$ 均为偶数。因此所有起始点为第 $i$ 个奇数的“优美”数组的个数即为：
    c++代码
class Solution { public: int numberOfSubarrays(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) { vector&amp;lt;int&amp;gt; odds = { -1 }; int size = nums.size(); for (int i = 0; i &amp;lt; size; i++) { if (nums[i] &amp;amp; 1) { // nums[i] is an odd number  odds.</description>
    </item>
    
    <item>
      <title>力扣总结：5. 最长回文子串</title>
      <link>https://chinwer.github.io/blog/leetcode-5/</link>
      <pubDate>Mon, 13 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://chinwer.github.io/blog/leetcode-5/</guid>
      <description>题目要求 给定一个字符串 $s$ ，找到 $s$ 中最长的回文子串。你可以假设 $s$ 的最大长度为1000
思路 一、动态规划法   核心思路
 如果一个字符串的头尾两个字符不一样，则它一定不是回文的； 否则：  如果里面的子串是回文，则整体为回文； 否则不是回文。      状态转移方程
记 $dp[i][j]$ 表示子串 $s[i..j]$ 是否为回文子串，则有：
dp[i][j] = (s[i] == s[j]) &amp;amp;&amp;amp; dp[i + 1][j - 1]   边界条件
当 $s[i] == s[j]$ 且 $j - i &amp;lt; 3$ 时直接有： $dp[i][j] = true$
  原题解
动态规划法
  二、中心扩散法   核心思路
遍历每一个索引，以其为中心向两边进行扩散。枚举中心位置的复杂度为 $O(n)$ ，从中心位置得到回文子串的复杂度为 $O(n)$，因此整体复杂度为 $O(N^2)$ 。</description>
    </item>
    
  </channel>
</rss>